# top-most EditorConfig file
root = true

# Default settings:
# A newline ending every file
# Use 4 spaces as indentation
[*]
insert_final_newline = true
indent_style = space
indent_size = 4
end_of_line = lf

[*.{fs,fsi,fsx,config}]
# https://fsprojects.github.io/fantomas/docs/end-users/Configuration.html
charset = utf-8
trim_trailing_whitespace = true
max_line_length=100
fsharp_multiline_block_brackets_on_same_column=true
fsharp_experimental_stroustrup_style=true
fsharp_keep_max_number_of_blank_lines=2
fsharp_max_array_or_list_number_of_items=1
fsharp_array_or_list_multiline_formatter=number_of_items
fsharp_max_infix_operator_expression=10
fsharp_multi_line_lambda_closing_newline=true

[paket.*]
trim_trailing_whitespace = true
indent_size = 2

[*.paket.references]
trim_trailing_whitespace = true
indent_size = 2

[*.cs]
# ReSharper properties
resharper_space_within_single_line_array_initializer_braces = true
resharper_place_field_attribute_on_same_line = false
resharper_place_accessorholder_attribute_on_same_line = false
csharp_indent_labels = flush_left
csharp_using_directive_placement = outside_namespace:error
csharp_prefer_simple_using_statement = true:suggestion
csharp_prefer_braces = true:error
csharp_style_namespace_declarations = file_scoped:silent
csharp_style_prefer_method_group_conversion = true:silent
csharp_style_expression_bodied_methods = false:suggestion

# Dotnet code style settings:
[*.{cs,csx,cake,vb}]
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false

dotnet_diagnostic.IDE0055.severity = error
dotnet_code_quality.CA1062.exclude_extension_method_this_parameter = true
dotnet_code_quality.CA2007.output_kind = WindowsApplication, WindowsRuntimeApplication
dotnet_code_quality.CA1801.api_surface = private, internal

dotnet_code_quality_unused_parameters = non_public

dotnet_remove_unnecessary_suppression_exclusions = all

#Strict access modifiers
dotnet_style_require_accessibility_modifiers = for_non_interface_members:error

#Prefer read-only fields
dotnet_style_readonly_field = true:error

# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Prefer clean code
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_operators = always_for_clarity:suggestion

# Suggest more modern language features when available
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_return = true:suggestion
dotnet_style_prefer_auto_properties = true:suggestion
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_simplified_interpolation = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion
dotnet_style_operator_placement_when_wrapping = beginning_of_line

# CSharp code style settings:
[*.{cs,csx,cake}]
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:error

csharp_using_directive_placement = outside_namespace:error

#Force braces
csharp_prefer_braces = true:error

# Prefer "var" everywhere
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion

# Prefer expression-body
csharp_style_expression_bodied_constructors = false:suggestion
csharp_style_expression_bodied_methods = false:suggestion
csharp_style_expression_bodied_operators = false:suggestion
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion
csharp_style_expression_bodied_lambdas = true:suggestion
csharp_style_expression_bodied_local_functions = false:suggestion

# Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_prefer_switch_expression = true:suggestion
csharp_style_prefer_pattern_matching = true:suggestion
csharp_style_prefer_not_pattern = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_pattern_local_over_anonymous_function = true:suggestion
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:suggestion
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion
csharp_style_throw_expression = true:suggestion
csharp_prefer_simple_using_statement = true:suggestion
csharp_prefer_static_local_function = true:suggestion

csharp_style_unused_value_expression_statement_preference = discard_variable:silent
csharp_style_unused_value_assignment_preference = discard_variable:silent

# Newline settings
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

#Indentation
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents_when_block = false

#Spacing
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_after_comma = true
csharp_space_before_comma = false
csharp_space_after_dot = false
csharp_space_before_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false
csharp_space_around_declaration_statements = false
csharp_space_between_empty_square_brackets = false
csharp_space_before_open_square_brackets = false
csharp_space_between_square_brackets = false

#Wrapping
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true

#Naming

# Naming Symbols
# constants - Define constant fields
dotnet_naming_symbols.constants.applicable_accessibilities = *
dotnet_naming_symbols.constants.applicable_kinds = field
dotnet_naming_symbols.constants.required_modifiers = const
# constant_locals - Define constant locals
dotnet_naming_symbols.constant_locals.applicable_accessibilities = *
dotnet_naming_symbols.constant_locals.applicable_kinds = *
dotnet_naming_symbols.constant_locals.required_modifiers = const
# non_private_readonly_fields - Define non-private readonly fields
dotnet_naming_symbols.non_private_readonly_fields.applicable_accessibilities = public, protected, internal, friend, protected_internal, protected_friend
dotnet_naming_symbols.non_private_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_readonly_fields.required_modifiers = readonly
# static_readonly_fields - Define static and readonly fields
dotnet_naming_symbols.static_readonly_fields.applicable_accessibilities = *
dotnet_naming_symbols.static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.static_readonly_fields.required_modifiers = static, readonly
# private_readonly_fields - Define private readonly fields
dotnet_naming_symbols.private_readonly_fields.applicable_accessibilities = private
dotnet_naming_symbols.private_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.private_readonly_fields.required_modifiers = readonly
# non_private_fields - Define non-private fields
dotnet_naming_symbols.non_private_fields.applicable_accessibilities = public, protected, internal, friend, protected_internal, protected_friend
dotnet_naming_symbols.non_private_fields.applicable_kinds = field
# private_fields - Define private fields
dotnet_naming_symbols.private_fields.applicable_accessibilities = private
dotnet_naming_symbols.private_fields.applicable_kinds = field
# non_field_members - Define any non-field member
dotnet_naming_symbols.non_field_members.applicable_kinds = method, property, event
# parameters - Defines any parameter
dotnet_naming_symbols.parameters.applicable_kinds = parameter
# non_interface_types - Defines class, struct, enum and delegate types
dotnet_naming_symbols.non_interface_types.applicable_kinds = class, struct, enum, delegate
# interface_types - Defines interfaces
dotnet_naming_symbols.interface_types.applicable_kinds = interface

# Naming Styles
# camel_case - camelCase style
dotnet_naming_style.camel_case.capitalization = camel_case
# pascal_case - PascalCase style
dotnet_naming_style.pascal_case.capitalization = pascal_case
# pascal_case_prefix_with_i - IPascalCase style
dotnet_naming_style.pascal_case_prefix_with_i.capitalization = pascal_case
dotnet_naming_style.pascal_case_prefix_with_i.required_prefix = I
# camel_case_prefix_with_underscore - _camelCase style
dotnet_naming_style.camel_case_prefix_with_underscore.capitalization = camel_case
dotnet_naming_style.camel_case_prefix_with_underscore.required_prefix = _
# all_upper_separated_by_underscore - All const fields must be uppercased and separated by undescrores
dotnet_naming_style.all_upper_separated_by_underscore.capitalization = all_upper
dotnet_naming_style.all_upper_separated_by_underscore.word_separator = _

# Naming Rules
# Constant fields must be uppercased
dotnet_naming_rule.constants_must_be_all_upper_separated_by_underscore.severity = none
dotnet_naming_rule.constants_must_be_all_upper_separated_by_underscore.symbols = constants
dotnet_naming_rule.constants_must_be_all_upper_separated_by_underscore.style = all_upper_separated_by_underscore
# Constant locals must be camelCase
dotnet_naming_rule.constant_locals_must_be_camel_case.severity = none
dotnet_naming_rule.constant_locals_must_be_camel_case.symbols = constant_locals
dotnet_naming_rule.constant_locals_must_be_camel_case.style = camel_case
# Parameters must be camelCase
dotnet_naming_rule.parameters_must_be_camel_case.severity = error
dotnet_naming_rule.parameters_must_be_camel_case.symbols = parameters
dotnet_naming_rule.parameters_must_be_camel_case.style = camel_case
# Public, internal and protected readonly fields must be PascalCase
dotnet_naming_rule.non_private_readonly_fields_must_be_pascal_case.severity = error
dotnet_naming_rule.non_private_readonly_fields_must_be_pascal_case.symbols = non_private_readonly_fields
dotnet_naming_rule.non_private_readonly_fields_must_be_pascal_case.style = pascal_case
# Static readonly fields must be PascalCase
dotnet_naming_rule.static_readonly_fields_must_be_pascal_case.severity = error
dotnet_naming_rule.static_readonly_fields_must_be_pascal_case.symbols = static_readonly_fields
dotnet_naming_rule.static_readonly_fields_must_be_pascal_case.style = pascal_case
# Private readonly fields must be camelCase with undercode
dotnet_naming_rule.private_readonly_fields_must_be_camel_case_prefix_with_underscore.severity = error
dotnet_naming_rule.private_readonly_fields_must_be_camel_case_prefix_with_underscore.symbols = private_readonly_fields
dotnet_naming_rule.private_readonly_fields_must_be_camel_case_prefix_with_underscore.style = camel_case_prefix_with_underscore
# Private fields must be camelCase with undercode
dotnet_naming_rule.private_fields_must_be_camel_case_prefix_with_underscore.severity = error
dotnet_naming_rule.private_fields_must_be_camel_case_prefix_with_underscore.symbols = private_fields
dotnet_naming_rule.private_fields_must_be_camel_case_prefix_with_underscore.style = camel_case_prefix_with_underscore
# Public, protected and internal fields must be PascalCase
dotnet_naming_rule.public_protected_internal_fields_must_be_pascal_case.severity = error
dotnet_naming_rule.public_protected_internal_fields_must_be_pascal_case.symbols = non_private_fields
dotnet_naming_rule.public_protected_internal_fields_must_be_pascal_case.style = pascal_case
# Public members must be PascalCase
dotnet_naming_rule.public_members_must_be_pascal_case.severity = error
dotnet_naming_rule.public_members_must_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.public_members_must_be_pascal_case.style = pascal_case
# Class, struct, enum and delegates must be PascalCase
dotnet_naming_rule.non_interface_types_must_be_pascal_case.severity = error
dotnet_naming_rule.non_interface_types_must_be_pascal_case.symbols = non_interface_types
dotnet_naming_rule.non_interface_types_must_be_pascal_case.style = pascal_case
# Interfaces must be PascalCase and start with an 'I'
dotnet_naming_rule.interface_types_must_be_prefixed_with_i.severity = error
dotnet_naming_rule.interface_types_must_be_prefixed_with_i.symbols = interface_types
dotnet_naming_rule.interface_types_must_be_prefixed_with_i.style = pascal_case_prefix_with_i

# Analyzers rules

## IDE FORMATTING RULES

# IDE0005: Using directive is unnecessary
dotnet_diagnostic.IDE0005.severity = error

## Microsoft.VisualStudio.Threading.Analyzers

# VSTHRD111: Add .ConfigureAwait(bool) to your await expression.
dotnet_diagnostic.VSTHRD111.severity = none

# VSTHRD200: Use "Async" suffix for async methods
dotnet_diagnostic.VSTHRD200.severity = none

## Csharp compiler rules

# CA1008: Enums should have zero value
dotnet_diagnostic.CA1008.severity = none

# CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
dotnet_diagnostic.CS1591.severity = none

## Csharp Code Quality Rules

# CA1014: Mark assemblies with CLSCompliantAttribute
dotnet_diagnostic.CA1014.severity = none

# CA1032: Implement standard exception constructors
dotnet_diagnostic.CA1032.severity = none

# CA1812: WorkJournalProvider is an internal class that is apparently never instantiated.
#         If so, remove the code from the assembly. If this class is intended to contain
#         only static members, make it static (Shared in Visual Basic).
dotnet_diagnostic.CA1812.severity = none

# CA2007: Consider calling ConfigureAwait on the awaited task
dotnet_diagnostic.CA2007.severity = none

# CA2234: Pass system uri objects instead of strings
dotnet_diagnostic.CA2234.severity = none

# CA1822: Mark members as static
dotnet_code_quality.CA1822.api_surface = none

## Style Cop rules

# SA0001: XML comment analysis disabled
dotnet_diagnostic.SA0001.severity = none

# SA1101: Prefix local calls with this
dotnet_diagnostic.SA1101.severity = none

# SA1200: Using directives should be placed correctly
dotnet_diagnostic.SA1200.severity = none

# SA1309: Field names should not begin with underscore
dotnet_diagnostic.SA1309.severity = none

# SA1600: A C# code element is missing a documentation header.
# We use CS1591 instead
dotnet_diagnostic.SA1600.severity = none

# SA1611: A C# method, constructor, delegate or indexer element is missing documentation for one or more of its parameters
# We use CS1591 instead
dotnet_diagnostic.SA1611.severity = none

# SA1623: Property summary documentation should match accessors
dotnet_diagnostic.SA1623.severity = none

# SA1633: File should have header
dotnet_diagnostic.SA1633.severity = none

# SA1642: Constructor summary documentation should begin with standard text
dotnet_diagnostic.SA1642.severity = none

## Sonar Qube rules

# S1135: Track uses of "TODO" tags
dotnet_diagnostic.S1135.severity = suggestion

# S3871: Exception types should be \"public\"
# It is handled by CA1064
dotnet_diagnostic.S3871.severity = suggestion

# S3925: \"ISerializable\" should be implemented correctly
dotnet_diagnostic.S3925.severity = none

# S4456: Parameter validation in yielding methods should be wrapped
dotnet_diagnostic.S4456.severity = none

# S4457: Parameter validation in "async"/"await" methods should be wrapped
dotnet_diagnostic.S4457.severity = none

# CA1848: Use the LoggerMessage delegates
dotnet_diagnostic.CA1848.severity = none

# CA1031: Do not catch general exception types
dotnet_diagnostic.CA1031.severity = none

# S125: Remove commented out code
dotnet_diagnostic.S125.severity = none

# CA1043: Use integral or string argument for indexers
dotnet_diagnostic.CA1043.severity = none